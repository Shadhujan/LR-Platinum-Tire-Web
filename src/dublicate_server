const express = require('express');
const cors = require('cors');
const multer = require('multer');
const app = express();
const port = 3214;
const mongoose = require('mongoose');

app.use(cors());

app.use(express.json());

// Set up multer for file uploads
const storage = multer.memoryStorage(); // You can choose diskStorage if you prefer storing files on the server
const upload = multer({ storage });

mongoose.connect('mongodb+srv://jeya38shadhujan:sha123@samplefirst.jg9ty.mongodb.net/SampleReview', { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => {
    console.log('Current database:', mongoose.connection.db.databaseName);
})
.catch(err => console.log(err));

//SampleReview - collection namwe
let User = mongoose.model('UsersCollection', new mongoose.Schema({
    username: String, // Simplified field definition
    email: String,
    password: String,
    contact: {
        phone: String,
        address: String
    },
    reviews: [
        {
            product_id: mongoose.Schema.Types.ObjectId, // Ref type simplified
            description: String,
            image: Object, // URL of the image
            rating: Number,
            date: { type: Date, default: Date.now }
        }
    ],
    appointments: [
        {
            customer_name: String,
            mobile_num: Number,
            service_type: String,
            date: Date
        }
    ],
    contacts: [
        {
            contact_name: String,
            email: String,
            message: String
        }
    ]
}, { collection: 'UsersCollection', timestamps: true }));

// let Review = mongoose.model('UsersCollection', new mongoose.Schema({
//     username: String, 
//     reviews: [
//         {
//             product_id: mongoose.Schema.Types.ObjectId, 
//             description: String,
//             image: Object, // URL of the image
//             rating: Number,
//             date: { type: Date, default: Date.now }
//         }
//     ]
// }, { collection: 'UsersCollection', timestamps: true }));

let User1 = mongoose.model('SampleReview', new mongoose.Schema({
        // Username: String, //variable name, type has to be exact name from json
        // Password: String,
        // Email: String,
        // GameProgress: [
        //     {
        //         InteractionID: String,
        //         UserResponse: String,
        //         JournalEntry: String,
        //         MachineLearningAnalysis: String,
        //         PersonalisedFeedback: String
        //     }
        // ]

        email1:String,
        username1: String
}, {collection:'SampleReview'}));

app.post('/Server/Register', async (req, res) => {
    let newUser = new User(req.body);

    console.log(newUser);

    newUser.save()
    .then(savedUser => {
        console.log("User saved to collection:", savedUser);
        res.status(200).json(savedUser);
    })
    .catch(err => {
        console.error(err);
        console.log("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA "+err);
        res.status(500).json({ error: err.toString() });
    });
});

// /
// /Server/User/Create
// /Server/User/Read
// /Server/User/Update
// /Server/User/Delete
// /Server/Review/Create
// /Server/Review/Read
// /Server/Review/Update
// /Server/Review/Delete

app.get('/Server/User/Read/:EXAMPLEVARhehe', async (req, res) => {
    let EXAMPLEVAR = req.params.EXAMPLEVARhehe;
    console.log(EXAMPLEVAR);
    User.findOne({'username': EXAMPLEVAR})
    .then(MongoData => {
        console.log(MongoData);
        console.log("HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHHAHAHA MongoData");
        res.json(MongoData);
    })
    .catch(err => {
        console.log(err);
    });
});

app.put('/Server/UpdateProfile/:CurrentUserName', async (req, res) => {
    let CurrentUserName = req.params.CurrentUserName;
    let newUsername = req.body.Username;
    let newPassword = req.body.Password;
    let newEmail = req.body.Email;
    console.log(newUsername);
    console.log(newPassword);
    console.log(newEmail);
    User.findOneAndUpdate({ "Username": CurrentUserName }, { Username: newUsername, Password: newPassword, Email: newEmail }, { new: true })
    .then(user => {
        console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! PROFILE UPDATED");
    })
    .catch(err => {
        console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! EEEERRRRRROOOORRRR");
        console.log(err);
    });
});

app.delete('/Server/DeleteProfile/:CurrentUserName', async (req, res) => {
    let Name = req.params.CurrentUserName;
    User.findOneAndDelete({ "Username": Name })
        .then(user => {
            if(user) {
                console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! user DELETED");
                res.json({ message: 'user deleted' });
            } else {
                console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! EEEERRRRRROOOORRRR");
                res.status(404).json({ message: 'user not found' });
            }
        })
        .catch(err => {
            console.log("Error:", err);
            console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! EEEERRRRRROOOORRRR");
            res.status(500).json({ error: err.toString() });
        });
});

////////////////////////////////////////////
let Review = mongoose.model('ReviewCollection', new mongoose.Schema({
    username: String, 
    reviews: [
        {
            product_id: mongoose.Schema.Types.ObjectId, 
            description: String,
            image: Object, // This can store base64 string or file info
            rating: Number,
            date: { type: Date, default: Date.now }
        }
    ]
}, { collection: 'ReviewCollection', timestamps: true }));

//create review endpoint
app.post('/Server/Review/Create', upload.any(), async (req, res) => {
    const { description } = req.body;
    const files = req.files;
  
    try {
      // Assuming you want to save review for a particular user (you can get this from the request or set it manually)
      const user = await Review.findOne({ username: 'johndoe' });
      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      const newReview = {
        product_id: mongoose.Types.ObjectId(),
        description: description,
        image: files.length > 0 ? files.map(file => file.buffer.toString('base64')) : null, // Storing as base64
        rating: 5, // Example static rating, you can modify this to accept rating from the client as well
      };
  
      // Add the new review to the user's reviews array
      user.reviews.push(newReview);
      await user.save();
  
      res.status(200).json({ message: 'Review created successfully' });
    } catch (error) {
      console.error('Error creating review:', error);
      res.status(500).json({ message: 'Error creating review', error });
    }
  });
  

// Update review endpoint
app.post('/Server/Review/Update', upload.any(), async (req, res) => {
  const { description } = req.body;
  const files = req.files;

  try {
    // Assuming you want to update review for a particular user
    const user = await Review.findOne({ username: 'johndoe' });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const newReview = {
      product_id: mongoose.Types.ObjectId(),
      description: description,
      image: files.length > 0 ? files.map(file => file.buffer.toString('base64')) : null, // Storing as base64
      rating: 5, // You can add rating input if required
    };

    // Update the reviews array by adding the new review
    user.reviews.push(newReview);
    await user.save();

    res.status(200).json({ message: 'Review updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating review', error });
  }
});

app.get('/Test', async (req, res) => {
    res.json({Test:"Tesfgfft"});
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});